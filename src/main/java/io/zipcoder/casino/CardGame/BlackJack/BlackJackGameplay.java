package io.zipcoder.casino.CardGame.BlackJack;import io.zipcoder.casino.Casino_test;import io.zipcoder.casino.Console;import io.zipcoder.casino.Player;import java.util.ArrayList;public class BlackJackGameplay {    private Player player;    public static void start(Player player) {        BlackJack blackJack = new BlackJack(player);        Casino_test instance = Casino_test.getInstance();        BlackJackPlayer blackJackPlayer = blackJack.getBlackJackPlayers().get(1);        BlackJackPlayer dealer = blackJack.getDealer();        int initialBet = Console.getIntInput("\n~~~~~~~~~~~~~~~~~~~\n\nHow much would you like to bet?");        if (initialBet < blackJack.getMinBet()) {            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nThe minimum bet is $50. Please try again.");            blackJack.start();        } else {            blackJackPlayer.setInitialBet(blackJack.betAmount(initialBet, blackJackPlayer));        }        BlackJackPlayer activePlayer;        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nGAME START - DEALING CARDS");        blackJack.deal();        int turnNumber = blackJack.getNumOfTurns();        int stands = blackJack.getStands();        boolean flag = true;        while (flag == true) {            if (turnNumber % 2 == 1) {                activePlayer = dealer;            } else {                activePlayer = blackJackPlayer;            }            ArrayList<Integer> handValue = blackJack.countPlayerHand(activePlayer);            if (turnNumber == 0 && dealer.getHandValue() == 21) {                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDealer's Current Hand: \n\n" + blackJack.formatHand(dealer.getPlayerHand()) + "\n\nDealer's Hand Value: " + dealer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nBlackjack! Dealer wins!");                blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() - (blackJackPlayer.getBetPot() * 2));                System.out.println("\nYou Lost $" + blackJackPlayer.getBetPot() * 2 + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                flag = false;            } else if (turnNumber == 0 && blackJackPlayer.getHandValue() == 21) {                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Current Hand: \n\n" + blackJack.formatHand(blackJackPlayer.getPlayerHand()) + "\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nBlackjack! Player wins!");                blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() + (blackJackPlayer.getBetPot() * 2));                System.out.println("\nYou Won: $" + blackJackPlayer.getBetPot() * 2 + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                flag = false;            } else if (activePlayer == blackJackPlayer && stands < 2) {                String response = Console.getStringInput("\n~~~~~~~~~~~~~~~~~~~\n\nDealer's Current Hand: \n\nMYSTERY-CARD || " + blackJack.formatHand(dealer.getDealerHand()) + "\n\nDealer's Hand Value: ??" +                        "\n\n~~~~~~~~~~~~~~~~~~~\n\nYour Current Hand: \n\n" + blackJack.formatHand(blackJackPlayer.getPlayerHand()) + "\n\nYour Hand Value: " + blackJack.formatHandValue(handValue) +                        "\n\n~~~~~~~~~~~~~~~~~~~\n\nYOUR TURN" + "\n\n~~~~~~~~~~~~~~~~~~~\n\nWhat do you want to do?\n<< Hit - Stand - Double Down - Split - Quit >>").toUpperCase();                switch (response) {                    case "HIT":                        blackJack.hit(blackJackPlayer);                        if (blackJackPlayer.getHandValue() > 21) {                            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Current Hand: \n\n" + blackJack.formatHand(blackJackPlayer.getPlayerHand()) + "\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nToo high, you lose!");                            blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() - blackJackPlayer.getBetPot());                            System.out.println("\nYou Lost $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                            flag = false;                        } else if (blackJackPlayer.getHandValue() == 21) {                            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Current Hand: \n\n" + blackJack.formatHand(blackJackPlayer.getPlayerHand()) + "\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nYou win!!! YAYAYAYAYAYAYYAYAYAYAYAYYY");                            blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() + blackJackPlayer.getBetPot());                            System.out.println("\nYou Won: $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                            flag = false;                        }                        break;                    case "STAND":                        blackJack.setNumOfTurns(turnNumber++);                        blackJack.stand();                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");                        stands++;                        break;                    case "DOUBLE DOWN":                        if (blackJack.getJustDealt()) {                            blackJack.doubleDown(activePlayer);                            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Current Bet: " + blackJackPlayer.getBetPot());                        } else {                            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYou can only double down right after the deal. Please choose another option.");                        }                        break;                    case "SPLIT":                        blackJack.split(activePlayer);                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nok so the code itself works but idk how to actually implement it into the game without going crazy so plz choose something else");                        break;                    case "QUIT":                        instance.chooseGame();                        break;                    default:                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nInput unknown, please try again");                        break;                }            } else if (activePlayer == dealer && stands < 2) {                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDEALER'S TURN");                if (activePlayer.getHandValue() > 15 && activePlayer.getHandValue() < 21) {                    blackJack.setNumOfTurns(turnNumber++);                    blackJack.stand();                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");                } else {                    blackJack.hit(activePlayer);                    if (activePlayer.getHandValue() > 21) {                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDealer's Current Hand: \n\n" + blackJack.formatHand(activePlayer.getPlayerHand()) + "\n\nDealer's Hand Value: " + activePlayer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nDealer bust, you win!");                        blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() + blackJackPlayer.getBetPot());                        System.out.println("\nYou Won: $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                        flag = false;                    } else if (activePlayer.getHandValue() == 21) {                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDealer's Current Hand: \n\n" + blackJack.formatHand(activePlayer.getPlayerHand()) + "\n\nDealer's Hand Value: " + activePlayer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nBlackjack! Dealer wins!");                        blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() - blackJackPlayer.getBetPot());                        System.out.println("\nYou Lost $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                        flag = false;                    } else if (handValue.get(0) < 21 || (handValue.size() > 2 && handValue.get(1) < 21)) {                        blackJack.setNumOfTurns(turnNumber++);                        blackJack.stand();                        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");                    }                }                stands++;            } else if (stands == 2) {                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDETERMINING WINNER...");                if (blackJackPlayer.getHandValue() > dealer.getHandValue()) {                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\nDealer's Hand Value: " + dealer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nYou win!");                    blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() + blackJackPlayer.getBetPot());                    System.out.println("\nYou Won: $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                } else if (blackJackPlayer.getHandValue() < dealer.getHandValue()) {                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\nDealer's Hand Value: " + dealer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nDealer wins! You lose!");                    blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() - blackJackPlayer.getBetPot());                    System.out.println("\nYou Lost $" + blackJackPlayer.getBetPot() + "\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                } else if (blackJackPlayer.getHandValue() == dealer.getHandValue()) {                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nYour Hand Value: " + blackJackPlayer.getHandValue() + "\n\nDealer's Hand Value: " + dealer.getHandValue() + "\n\n~~~~~~~~~~~~~~~~~~~\n\nTie, no one wins");                    System.out.println("\nCurrent Wallet: $" + blackJackPlayer.getPlayer().getWallet());                }                flag = false;            }        }        dealer.resetHand();        blackJackPlayer.resetHand();        blackJack.setNumOfTurns(0);        blackJack.setStands(0);        blackJackPlayer.setInitialBet(0);        blackJackPlayer.setBetPot(0);        String input = Console.getStringInput("\n~~~~~~~~~~~~~~~~~~~\n\nWould you like to play again?\n\n<< Yes - No >>").toUpperCase();        switch (input) {            case "YES":                start(player);                break;            case "NO":                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nReturning to the Casino!");                // go back to casino                instance.chooseGame();                break;        }    }}